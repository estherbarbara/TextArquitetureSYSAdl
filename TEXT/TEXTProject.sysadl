Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	
	datatype File {
	}
}
package Ports {
	import SysADL.types;
	
	port def SendTextOPT {
		flow out String
	}
	
port def SendFileOPT {
		flow in File
	}
	
	port def ReceiveFileIPT {
		flow in File
	}
	port def ReceiveTextIPT {
		flow in String
	}
}
package Connector {
	import Ports;
connector def FileCN {
		participants:
		~p0 : SendFileOPT;
		~p1 : ReceiveFileIPT;
		flows:
		File from p0 to p1
	}
	connector def TextCN {
		participants:
		~p2 : SendTextOPT;
		~p3 : ReceiveTextIPT;
		flows:
		String from p2 to p3 connector def newElement {
		}
	}
}

package  Components {
	import Ports;
	import Connector;
	component def BreakCP {
		ports:
		p2 : SendTextOPT;
		p1 : ReceiveFileIPT;
		
	}
	boundary component def ShowTextCP {
		ports:
		p3 : ReceiveTextIPT;
	}
	boundary component def ReceiveFileCP {
		ports:
		p0 : SendFileOPT;
	}
	component def system {
		configuration {
			components:
			ReceiveFileCP : ReceiveFileCP {
				using
				ports:
				p0 : SendFileOPT;
			}
			BreakCP : BreakCP {
				using
				ports:
				p2 : SendTextOPT;
				p1 : ReceiveFileIPT;
			}
			ShowTextCP : ShowTextCP {
				using
				ports:
				p3 : ReceiveTextIPT;
			}
			ProcessTwoCP : SortCP {
				using
				ports:
				p4 : ReceiveFileIPT;
				p5 : SendTextOPT;
			}
			connectors:
			cn0 : FileCN bindings p1 = p0;
			cn1 : TextCN bindings p2 = p3;
		cn3 : TextCN bindings p5 = p3;
			cn2 : FileCN bindings p4 = p0;
		}
	}
component def SortCP {
		ports:
		p4 : ReceiveFileIPT;
		p5 : SendTextOPT;
	}
}
Requirement AnalisarPalavras ( 1 ) {
	Requirement Filtrar ( 4 ) {
		Requirement OrdenarPalavras ( 6 ) {
			satisfied by Components.SortCP;
			Requirement OrdenaPorLetras ( 10 ) {
			}
			Requirement OrdenaPorSequeciaLetras ( 9 ) {
			}
		}
		Requirement SeparaPalavras ( 5 ) {
		satisfied by Components.BreakCP;
		}
	}
Requirement ExibeAoUsuario ( 3 ) {
satisfied by Components.ShowTextCP;
	}
Requirement LeTexto ( 2 ) {
satisfied by Components.ReceiveFileCP;
	}
}
Requirement OrdenaAscendente ( 7 ) {
	derive AnalisarPalavras.Filtrar.OrdenarPalavras;
}
Requirement OrdenaDescendente ( 8 ) {
	derive AnalisarPalavras.Filtrar.OrdenarPalavras;
}