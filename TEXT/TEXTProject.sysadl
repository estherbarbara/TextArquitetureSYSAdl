Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	datatype File {
	}
	datatype ListaPalavras {
	attributes:
		palavras : String[];
	}
datatype AscDesc {
	attributes:
		ascendente : Boolean;
	}
}
package Ports {
	import SysADL.types;
	
	port def SendTextOPT {
		flow out String
	}
	port def SendFileOPT {
		flow in File
	}
	port def ReceiveFileIPT {
		flow in File
	}
	port def ReceiveTextIPT {
		flow in String
	}
	port def SendListTextIPT {
		flow in String
	}
	port def ReceiveListTextOPT {
		flow out String
	}
port def AscDescIPT {
		flow in AscDesc
	}
	port def AscDescOPT {
		flow out AscDesc
	}
port def ReceiveFilesIPT {
		ports:
		port1 : ReceiveFileIPT;
		port2 : ReceiveFileIPT;
	}
}
package Connector {
	import Ports;
connector def FileCN {
		participants:
		~p0 : SendFileOPT;
		~p1 : ReceiveFileIPT;
		flows:
		File from p0 to p1
	}
	connector def TextCN {
		participants:
		~p2 : SendTextOPT;
		~p3 : ReceiveTextIPT;
		flows:
		String from p2 to p3 connector def newElement {
		}
	}
	connector def ListTextCN {
		participants:
		~p5 : SendListTextIPT;
		~p4 : ReceiveListTextOPT;
		flows:
		String from p4 to p5
	}
connector def BooleanCN {
		participants:
		~p7 : AscDescIPT;
		~p6 : AscDescOPT;
		flows:
		AscDesc from p6 to p7
	}
}

package  Components {
	import Ports;
	import Connector;
	import SysADL.types;
	component def ParticionaTextoCP {
		ports:
		p2 : SendTextOPT;
		
		
	c2 : ReceiveFileIPT [ 1, -1 ];
		c1 : ReceiveFileIPT [ 1, -1 ];
		c0 : ReceiveFileIPT [ 1, -1 ];
	}
	boundary component def ShowTextCP {
		ports:
		p7 : ReceiveListTextOPT;
	}
	boundary component def ReceiveFileCP {
		ports:
		p0 : SendFileOPT [ 1, -1 ];
	}
	component def system {
		configuration {
			components:
			ReceiveFileCP : ReceiveFileCP {
				using
				ports:
				e0 : SendFileOPT [ 1, -1 ];
			}
			
			
			
			FiltraPalavras : FiltraPalavrasCP {
				using
				ports:
				p3 : ReceiveTextIPT;
				p4 : SendListTextIPT;
			}
			
			ShowTextCP : ShowTextCP {
				using
				ports:
				p7 : ReceiveListTextOPT;
			}
			OrdenacaoCP : OrdenacaoCP {
				using
				ports:
				p8 : AscDescOPT;
			}
			OrdenaPalavrasCP : OrdenaPalavrasCP {
				using
				ports:
				p6 : SendListTextIPT;
				p5 : ReceiveListTextOPT;
				p9 : AscDescIPT;
			}
			ReceiveFileCP : ReceiveFileCP {
				using
				ports:
				e2 : SendFileOPT;
			}
			ParticionaTextoCP : ParticionaTextoCP {
				using
				ports:
				p2 : SendTextOPT;
				c2 : ReceiveFileIPT;
				c1 : ReceiveFileIPT;
				c0 : ReceiveFileIPT;
			}
			ReceiveFileCP : ReceiveFileCP {
				using
				ports:
				e1 : SendFileOPT;
			}
			connectors:
			
			
		cn4 : ListTextCN bindings p7 = p6;
			cn2 : ListTextCN bindings p4 = p5;
			cn3 : BooleanCN bindings p8 = p9;
		cn1 : TextCN bindings p2 = p3;
			c0 : FileCN bindings e0 = c0;
			c1 : FileCN bindings e1 = c2;
			c2 : FileCN bindings e2 = c1;
		}
	}
component def OrdenaPalavrasCP {
	ports:
		p6 : SendListTextIPT;
		p5 : ReceiveListTextOPT;
	p9 : AscDescIPT;
	}
activity def OrdenaPalavrasAC ( orderedListTextIn : ListaPalavras , inOrder :
	AscDesc ) : ( orderedListText : ListaPalavras ) {
		body {
		actions : 
			
		OrdenaDescAN : OrdenaDescAN {
				using pins : p5 : AscDesc;
				p4 : ListaPalavras;
			}
			OrdenaAscAN : OrdenaAscAN {
				using pins : p6 : ListaPalavras;
				p7 : AscDesc;
			}
			delegate inOrder to p5
			delegate inOrder to p7
			delegate orderedListTextIn to p4
			delegate orderedListTextIn to p6
			delegate orderedListText to OrdenaAscAN
			delegate orderedListText to OrdenaDescAN
		}
	}
	activity def ParticionaTextoAC ( p3 : File ) : ( p4 : String ) {
		body {
			actions : LeAN : LerAN {
				using pins : p1 : File;
			}
			ConverteStringAN : ConverterStringAN {
				using pins : p2 : String;
			}
			
			delegate p4 to ConverteStringAN flow from LeAN to p2
		flow from Files to p1
			delegate p3 to Files databuffer Files : SysADL.types.File {
			}
		}
	}
	action def LerAN ( p1 : File ) : String {
	}
	action def ConverterStringAN ( p2 : String ) : String {
	}
component def FiltraPalavrasCP {
		ports:
		p3 : ReceiveTextIPT;
		p4 : SendListTextIPT;
	}
activity def FiltraPalavrasAC ( textIn : String ) : ( filteredListTextOut : ListaPalavras ) {
		body {
		actions : FiltrarAN : FiltrarAN {
				using pins : p3 : String;
			}
			delegate textIn to p3
			delegate filteredListTextOut to FiltrarAN
		}
	}
	action def FiltrarAN ( p3 : String ) : ListaPalavras {
	}
	action def OrdenaDescAN ( p4 : ListaPalavras , p5 : AscDesc ) : ListaPalavras {
	}
	action def OrdenaAscAN ( p6 : ListaPalavras , p7 : AscDesc ) : ListaPalavras {
	}
	boundary component def OrdenacaoCP {
		ports:
		p8 : AscDescOPT;
	}
	constraint PreLeEQ ( e1 : File ) : ( e2 : String ) {
		equation = "e1 != null && e2 == '' "
	}
	constraint PosLeEQ ( e1 : File ) : ( e2 : String ) {
		equation = "e2 != null"
	}
	constraint PreConverteEQ ( e3 : String ) : ( e4 : String ) {
		equation = "e3 != null && e4 == '' "
	}
	constraint PosConverteEQ ( e3 : String ) : ( e4 : String ) {
		equation = "e4 != null"
	}
	constraint PreFiltroEQ ( e5 : String ) : ( e6 : ListaPalavras ) {
		equation = "e5 != null && size(e6) = 0"
	}
	constraint PosFiltroEQ ( e5 : String ) : ( e6 : ListaPalavras ) {
		equation = "e6 != null && size(e6) > 0"
	}
	constraint PreOrdenaEQ ( e7 : ListaPalavras , e8 : AscDesc ) : ( e9 :
	ListaPalavras ) {
		equation = " size(e7) >= 0 && e8 != null && size(e9) == 0 "
	}
	constraint PosOrdenaEQ ( e7 : ListaPalavras , e8 : AscDesc ) : ( e9 :
	ListaPalavras ) {
		equation = "size(e7) = size(e9)"
	}
}
Requirement AnalisarPalavras ( 1 ) {
	Requirement Filtrar ( 4 ) {
		Requirement OrdenarPalavras ( 6 ) {
			satisfied by Components.OrdenaPalavrasCP;
			
			
		}
		Requirement SeparaPalavras ( 5 ) {
		satisfied by Components.ParticionaTextoCP;
		}
	Requirement FiltraPalavras ( 0 ) {
		satisfied by Components.FiltraPalavrasCP;
		}
	}
Requirement ExibeAoUsuario ( 3 ) {
satisfied by Components.ShowTextCP;
	}
Requirement LeTexto ( 2 ) {
satisfied by Components.ReceiveFileCP;
	}
}
Requirement OrdenaAscendente ( 7 ) {
	derive AnalisarPalavras.Filtrar.OrdenarPalavras;
}
Requirement OrdenaDescendente ( 8 ) {
	derive AnalisarPalavras.Filtrar.OrdenarPalavras;
}