Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	datatype File {
	}
	datatype ListaPalavras {
	attributes:
		palavras : String[];
	}
}
package Ports {
	import SysADL.types;
	
	port def SendTextOPT {
		flow out String
	}
	port def SendFileOPT {
		flow in File
	}
	port def ReceiveFileIPT {
		flow in File
	}
	port def ReceiveTextIPT {
		flow in String
	}
	port def SendListTextIPT {
		flow in String
	}
	port def ReceiveListTextOPT {
		flow out String
	}
}
package Connector {
	import Ports;
connector def FileCN {
		participants:
		~p0 : SendFileOPT;
		~p1 : ReceiveFileIPT;
		flows:
		File from p0 to p1
	}
	connector def TextCN {
		participants:
		~p2 : SendTextOPT;
		~p3 : ReceiveTextIPT;
		flows:
		String from p2 to p3 connector def newElement {
		}
	}
	connector def ListTextCN {
		participants:
		~p5 : SendListTextIPT;
		~p4 : ReceiveListTextOPT;
		flows:
		String from p4 to p5
	}
}

package  Components {
	import Ports;
	import Connector;
	import SysADL.types;
	component def ParticionaTextoCP {
		ports:
		p2 : SendTextOPT;
		p1 : ReceiveFileIPT;
		
	}
	boundary component def ShowTextCP {
		ports:
		p7 : ReceiveListTextOPT;
	}
	boundary component def ReceiveFileCP {
		ports:
		p0 : SendFileOPT;
	}
	component def system {
		configuration {
			components:
			ReceiveFileCP : ReceiveFileCP {
				using
				ports:
				p0 : SendFileOPT;
			}
			BreakCP : ParticionaTextoCP {
				using
				ports:
				p2 : SendTextOPT;
				p1 : ReceiveFileIPT;
			}
			
			
			FiltraPalavras : FiltraPalavrasCP {
				using
				ports:
				p3 : ReceiveTextIPT;
				p4 : SendListTextIPT;
			}
			OrdenaPalavrasCP : OrdenaPalavrasCP {
				using
				ports:
				p6 : SendListTextIPT;
				p5 : ReceiveListTextOPT;
			}
			ShowTextCP : ShowTextCP {
				using
				ports:
				p7 : ReceiveListTextOPT;
			}
			connectors:
			cn0 : FileCN bindings p1 = p0;
			
			
		cn1 : TextCN bindings p2 = p3;
			cn2 : ListTextCN bindings p4 = p5;
			cn3 : ListTextCN bindings p6 = p7;
		}
	}
component def OrdenaPalavrasCP {
	ports:
		p6 : SendListTextIPT;
		p5 : ReceiveListTextOPT;
	}
activity def OrdenaPalavrasAC ( in2 : String ) : ( out2 : String ) {
		body {
		}
	}
	activity def ParticionaTextoAC ( p3 : File ) : ( p4 : String ) {
		body {
			actions : LeAN : LerAN {
				using pins : newPin : File;
			}
			ConverteStringAN : ConverterStringAN {
				using pins : p2 : String;
			}
			delegate p3 to newPin
			delegate p4 to ConverteStringAN flow from LeAN to p2
		}
	}
	action def LerAN ( p1 : File ) : String {
	}
	action def ConverterStringAN ( p2 : String ) : String {
	}
component def FiltraPalavrasCP {
		ports:
		p3 : ReceiveTextIPT;
		p4 : SendListTextIPT;
	}
activity def FiltraPalavrasAC ( textIn : String ) : ( listTextOut : String ) {
		body {
		}
	}
}
Requirement AnalisarPalavras ( 1 ) {
	Requirement Filtrar ( 4 ) {
		Requirement OrdenarPalavras ( 6 ) {
			satisfied by Components.OrdenaPalavrasCP;
			
			
		}
		Requirement SeparaPalavras ( 5 ) {
		satisfied by Components.ParticionaTextoCP;
		}
	Requirement FiltraPalavras ( 0 ) {
		satisfied by Components.FiltraPalavrasCP;
		}
	}
Requirement ExibeAoUsuario ( 3 ) {
satisfied by Components.ShowTextCP;
	}
Requirement LeTexto ( 2 ) {
satisfied by Components.ReceiveFileCP;
	}
}
Requirement OrdenaAscendente ( 7 ) {
	derive AnalisarPalavras.Filtrar.OrdenarPalavras;
}
Requirement OrdenaDescendente ( 8 ) {
	derive AnalisarPalavras.Filtrar.OrdenarPalavras;
}